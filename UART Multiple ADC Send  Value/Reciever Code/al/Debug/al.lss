
al.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a2  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000071  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000bf  00000000  00000000  00000273  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000010a  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000029  00000000  00000000  00000462  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000048b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>


int main(void)
{
	DDRD |= (1 << PIND0);//PORTD pin0 as INPUT
  6c:	88 9a       	sbi	0x11, 0	; 17
	int UBRR_Value = 25; // 2400 baud rate
	UBRRH = (unsigned char) (UBRR_Value >> 8);
  6e:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) UBRR_Value;
  70:	89 e1       	ldi	r24, 0x19	; 25
  72:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1 << RXEN) | (1 << TXEN);
  74:	88 e1       	ldi	r24, 0x18	; 24
  76:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1 << USBS) | (3 << UCSZ0);
  78:	8e e0       	ldi	r24, 0x0E	; 14
  7a:	80 bd       	out	0x20, r24	; 32
	DDRB |=(1<<PINB0)|(1<<PINB1)|(1<<PINB2);
  7c:	87 b3       	in	r24, 0x17	; 23
  7e:	87 60       	ori	r24, 0x07	; 7
  80:	87 bb       	out	0x17, r24	; 23
	DDRC |=(1<<PINC0);
  82:	a0 9a       	sbi	0x14, 0	; 20
	DDRC |=(1<<PINC1);
  84:	a1 9a       	sbi	0x14, 1	; 20
	unsigned char rb;
	
    while(1)
    {
		rb=UDR;
  86:	8c b1       	in	r24, 0x0c	; 12
        while (! (UCSRA & (1 << RXC)) );
  88:	5f 9b       	sbis	0x0b, 7	; 11
  8a:	fe cf       	rjmp	.-4      	; 0x88 <main+0x1c>
        
       
        
        if (rb == 0b11110000)
  8c:	80 3f       	cpi	r24, 0xF0	; 240
  8e:	29 f4       	brne	.+10     	; 0x9a <main+0x2e>
        {
	        PORTB |=(1<<PINB0) | (1<<PINB2); /////1=>PB2///2=>PB1///3=>PB0
  90:	88 b3       	in	r24, 0x18	; 24
  92:	85 60       	ori	r24, 0x05	; 5
  94:	88 bb       	out	0x18, r24	; 24
	        PORTB &= ~(1 << PINB1);
  96:	c1 98       	cbi	0x18, 1	; 24
  98:	f6 cf       	rjmp	.-20     	; 0x86 <main+0x1a>
        }
		else if (rb==0b11111000)
  9a:	88 3f       	cpi	r24, 0xF8	; 248
  9c:	29 f4       	brne	.+10     	; 0xa8 <main+0x3c>
		{
			PORTB |=(1<<PINB1) | (1<<PINB2);
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	86 60       	ori	r24, 0x06	; 6
  a2:	88 bb       	out	0x18, r24	; 24
			PORTB &= ~(1 << PINB0);
  a4:	c0 98       	cbi	0x18, 0	; 24
  a6:	ef cf       	rjmp	.-34     	; 0x86 <main+0x1a>
		}
		else if (rb==0b00001111)
  a8:	8f 30       	cpi	r24, 0x0F	; 15
  aa:	11 f4       	brne	.+4      	; 0xb0 <main+0x44>
		{
			PORTC |=(1<<PINC0);	
  ac:	a8 9a       	sbi	0x15, 0	; 21
  ae:	eb cf       	rjmp	.-42     	; 0x86 <main+0x1a>
		}
		else if (rb==0b00011111)
  b0:	8f 31       	cpi	r24, 0x1F	; 31
  b2:	49 f7       	brne	.-46     	; 0x86 <main+0x1a>
		{
			PORTC &= ~(1 << PINC0);
  b4:	a8 98       	cbi	0x15, 0	; 21
  b6:	e7 cf       	rjmp	.-50     	; 0x86 <main+0x1a>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
