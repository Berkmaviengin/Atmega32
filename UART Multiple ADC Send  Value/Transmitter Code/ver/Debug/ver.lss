
ver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000030c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000030c  000003a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800078  00800078  000003b8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004d7  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000249  00000000  00000000  0000091f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e5  00000000  00000000  00000b68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000024f  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f6  00000000  00000000  00001093  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001289  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 38       	cpi	r26, 0x8A	; 138
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  8a:	0c 94 84 01 	jmp	0x308	; 0x308 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <usart_putc>:

void usart_putc (char send)
{
	// Do nothing for a bit if there is already
	// data waiting in the hardware to be sent
	while ((UCSRA & (1 << UDRE)) == 0) {};
  92:	5d 9b       	sbis	0x0b, 5	; 11
  94:	fe cf       	rjmp	.-4      	; 0x92 <usart_putc>
	UDR = send;
  96:	8c b9       	out	0x0c, r24	; 12
  98:	08 95       	ret

0000009a <usart_puts>:
}

void usart_puts (const char *send)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	ec 01       	movw	r28, r24
	// Cycle through each character individually
	while (*send) {
  a0:	88 81       	ld	r24, Y
  a2:	88 23       	and	r24, r24
  a4:	31 f0       	breq	.+12     	; 0xb2 <usart_puts+0x18>
  a6:	21 96       	adiw	r28, 0x01	; 1
		usart_putc(*send++);
  a8:	0e 94 49 00 	call	0x92	; 0x92 <usart_putc>
}

void usart_puts (const char *send)
{
	// Cycle through each character individually
	while (*send) {
  ac:	89 91       	ld	r24, Y+
  ae:	81 11       	cpse	r24, r1
  b0:	fb cf       	rjmp	.-10     	; 0xa8 <usart_puts+0xe>
		usart_putc(*send++);
	}
}
  b2:	df 91       	pop	r29
  b4:	cf 91       	pop	r28
  b6:	08 95       	ret

000000b8 <usart_ok>:

void usart_ok()
{
	usart_puts("OK\r\n");
  b8:	82 e6       	ldi	r24, 0x62	; 98
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 4d 00 	call	0x9a	; 0x9a <usart_puts>
  c0:	08 95       	ret

000000c2 <print_value>:
}

void print_value (char *id, int *value)
{
  c2:	1f 93       	push	r17
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	28 97       	sbiw	r28, 0x08	; 8
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
  d8:	18 2f       	mov	r17, r24
  da:	cb 01       	movw	r24, r22
	char buffer[8];
	itoa(value, buffer, 10);
  dc:	4a e0       	ldi	r20, 0x0A	; 10
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	be 01       	movw	r22, r28
  e2:	6f 5f       	subi	r22, 0xFF	; 255
  e4:	7f 4f       	sbci	r23, 0xFF	; 255
  e6:	0e 94 3c 01 	call	0x278	; 0x278 <itoa>
	usart_putc(id);
  ea:	81 2f       	mov	r24, r17
  ec:	0e 94 49 00 	call	0x92	; 0x92 <usart_putc>
	usart_putc(':');
  f0:	8a e3       	ldi	r24, 0x3A	; 58
  f2:	0e 94 49 00 	call	0x92	; 0x92 <usart_putc>
	usart_puts(buffer);
  f6:	ce 01       	movw	r24, r28
  f8:	01 96       	adiw	r24, 0x01	; 1
  fa:	0e 94 4d 00 	call	0x9a	; 0x9a <usart_puts>
	usart_puts(RETURN_NEWLINE);
  fe:	85 e7       	ldi	r24, 0x75	; 117
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0e 94 4d 00 	call	0x9a	; 0x9a <usart_puts>
}
 106:	28 96       	adiw	r28, 0x08	; 8
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	f8 94       	cli
 10c:	de bf       	out	0x3e, r29	; 62
 10e:	0f be       	out	0x3f, r0	; 63
 110:	cd bf       	out	0x3d, r28	; 61
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	1f 91       	pop	r17
 118:	08 95       	ret

0000011a <copy_command>:
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 11a:	f8 94       	cli
void copy_command ()
{
	// The USART might interrupt this - don't let that happen!
	ATOMIC_BLOCK(ATOMIC_FORCEON) {
		// Copy the contents of data_in into command_in
		memcpy(command_in, data_in, 8);
 11c:	88 e0       	ldi	r24, 0x08	; 8
 11e:	e1 e8       	ldi	r30, 0x81	; 129
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	a9 e7       	ldi	r26, 0x79	; 121
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	01 90       	ld	r0, Z+
 128:	0d 92       	st	X+, r0
 12a:	8a 95       	dec	r24
 12c:	e1 f7       	brne	.-8      	; 0x126 <copy_command+0xc>

		// Now clear data_in, the USART can reuse it now
		memset(data_in[0], 0, 8);
 12e:	e0 91 81 00 	lds	r30, 0x0081
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	88 e0       	ldi	r24, 0x08	; 8
 136:	df 01       	movw	r26, r30
 138:	1d 92       	st	X+, r1
 13a:	8a 95       	dec	r24
 13c:	e9 f7       	brne	.-6      	; 0x138 <copy_command+0x1e>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 13e:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
 140:	08 95       	ret

00000142 <parse_assignment>:
	}
}

unsigned long parse_assignment ()
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	cd b7       	in	r28, 0x3d	; 61
 148:	de b7       	in	r29, 0x3e	; 62
 14a:	60 97       	sbiw	r28, 0x10	; 16
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
	char *pch;
	char cmdValue[16];
	// Find the position the equals sign is
	// in the string, keep a pointer to it
	pch = strchr(command_in, '=');
 156:	6d e3       	ldi	r22, 0x3D	; 61
 158:	70 e0       	ldi	r23, 0x00	; 0
 15a:	89 e7       	ldi	r24, 0x79	; 121
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	0e 94 2a 01 	call	0x254	; 0x254 <strchr>
	// Copy everything after that point into
	// the buffer variable
	strcpy(cmdValue, pch+1);
 162:	bc 01       	movw	r22, r24
 164:	6f 5f       	subi	r22, 0xFF	; 255
 166:	7f 4f       	sbci	r23, 0xFF	; 255
 168:	ce 01       	movw	r24, r28
 16a:	01 96       	adiw	r24, 0x01	; 1
 16c:	0e 94 35 01 	call	0x26a	; 0x26a <strcpy>
	// Now turn this value into an integer and
	// return it to the caller.
	return atoi(cmdValue);
 170:	ce 01       	movw	r24, r28
 172:	01 96       	adiw	r24, 0x01	; 1
 174:	0e 94 0c 01 	call	0x218	; 0x218 <atoi>
 178:	bc 01       	movw	r22, r24
 17a:	88 27       	eor	r24, r24
 17c:	77 fd       	sbrc	r23, 7
 17e:	80 95       	com	r24
 180:	98 2f       	mov	r25, r24
}
 182:	60 96       	adiw	r28, 0x10	; 16
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	f8 94       	cli
 188:	de bf       	out	0x3e, r29	; 62
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	cd bf       	out	0x3d, r28	; 61
 18e:	df 91       	pop	r29
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <process_command>:


void process_command()
{
	switch (command_in[0]) {
 194:	80 91 79 00 	lds	r24, 0x0079
 198:	8d 34       	cpi	r24, 0x4D	; 77
 19a:	d1 f0       	breq	.+52     	; 0x1d0 <process_command+0x3c>
 19c:	83 35       	cpi	r24, 0x53	; 83
 19e:	f9 f4       	brne	.+62     	; 0x1de <process_command+0x4a>
		case 'S':
		if (command_in[1] == '?') {
 1a0:	80 91 7a 00 	lds	r24, 0x007A
 1a4:	8f 33       	cpi	r24, 0x3F	; 63
 1a6:	49 f4       	brne	.+18     	; 0x1ba <process_command+0x26>
			// Do the query action for S
			print_value('S', sensitivity);
 1a8:	60 91 60 00 	lds	r22, 0x0060
 1ac:	70 91 61 00 	lds	r23, 0x0061
 1b0:	83 e5       	ldi	r24, 0x53	; 83
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 61 00 	call	0xc2	; 0xc2 <print_value>
 1b8:	08 95       	ret
			} else if (command_in[1] == '=') {
 1ba:	80 91 7a 00 	lds	r24, 0x007A
 1be:	8d 33       	cpi	r24, 0x3D	; 61
 1c0:	91 f4       	brne	.+36     	; 0x1e6 <process_command+0x52>
			sensitivity = parse_assignment();
 1c2:	0e 94 a1 00 	call	0x142	; 0x142 <parse_assignment>
 1c6:	70 93 61 00 	sts	0x0061, r23
 1ca:	60 93 60 00 	sts	0x0060, r22
 1ce:	08 95       	ret
		}
		break;
		case 'M':
		if (command_in[1] == '?') {
 1d0:	80 91 7a 00 	lds	r24, 0x007A
 1d4:	8f 33       	cpi	r24, 0x3F	; 63
 1d6:	39 f0       	breq	.+14     	; 0x1e6 <process_command+0x52>
			// Do the query action for M
			} else if (command_in[1] == '=') {
 1d8:	80 91 7a 00 	lds	r24, 0x007A
 1dc:	08 95       	ret
			// Do the set action for M
		}
		break;
		default:
		usart_puts("NOT RECOGNISED\r\n");
 1de:	87 e6       	ldi	r24, 0x67	; 103
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	0e 94 4d 00 	call	0x9a	; 0x9a <usart_puts>
 1e6:	08 95       	ret

000001e8 <main>:
}

int main(void)
{
	// Turn on USART hardware (RX, TX)
	UCSRB |= (1 << RXEN) | (1 << TXEN);
 1e8:	8a b1       	in	r24, 0x0a	; 10
 1ea:	88 61       	ori	r24, 0x18	; 24
 1ec:	8a b9       	out	0x0a, r24	; 10
	// 8 bit char sizes
	UCSRC |= (1 << UCSZ0) | (1 << UCSZ1);
 1ee:	80 b5       	in	r24, 0x20	; 32
 1f0:	86 60       	ori	r24, 0x06	; 6
 1f2:	80 bd       	out	0x20, r24	; 32
	// Set baud rate
	UBRRH = (BAUD_PRESCALE >> 8);
 1f4:	10 bc       	out	0x20, r1	; 32
	UBRRL = BAUD_PRESCALE;
 1f6:	87 e6       	ldi	r24, 0x67	; 103
 1f8:	89 b9       	out	0x09, r24	; 9
	// Enable the USART Receive interrupt
	UCSRB |= (1 << RXCIE );
 1fa:	57 9a       	sbi	0x0a, 7	; 10

	// Globally enable interrupts
	sei();
 1fc:	78 94       	sei

	while(1) {

		if (command_ready == TRUE) {
 1fe:	80 91 89 00 	lds	r24, 0x0089
 202:	81 30       	cpi	r24, 0x01	; 1
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x16>
			copy_command();
 206:	0e 94 8d 00 	call	0x11a	; 0x11a <copy_command>
			process_command();
 20a:	0e 94 ca 00 	call	0x194	; 0x194 <process_command>

			command_ready = FALSE;
 20e:	10 92 89 00 	sts	0x0089, r1
			usart_ok();
 212:	0e 94 5c 00 	call	0xb8	; 0xb8 <usart_ok>
 216:	f3 cf       	rjmp	.-26     	; 0x1fe <main+0x16>

00000218 <atoi>:
 218:	fc 01       	movw	r30, r24
 21a:	88 27       	eor	r24, r24
 21c:	99 27       	eor	r25, r25
 21e:	e8 94       	clt
 220:	21 91       	ld	r18, Z+
 222:	20 32       	cpi	r18, 0x20	; 32
 224:	e9 f3       	breq	.-6      	; 0x220 <atoi+0x8>
 226:	29 30       	cpi	r18, 0x09	; 9
 228:	10 f0       	brcs	.+4      	; 0x22e <atoi+0x16>
 22a:	2e 30       	cpi	r18, 0x0E	; 14
 22c:	c8 f3       	brcs	.-14     	; 0x220 <atoi+0x8>
 22e:	2b 32       	cpi	r18, 0x2B	; 43
 230:	41 f0       	breq	.+16     	; 0x242 <atoi+0x2a>
 232:	2d 32       	cpi	r18, 0x2D	; 45
 234:	39 f4       	brne	.+14     	; 0x244 <atoi+0x2c>
 236:	68 94       	set
 238:	04 c0       	rjmp	.+8      	; 0x242 <atoi+0x2a>
 23a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <__mulhi_const_10>
 23e:	82 0f       	add	r24, r18
 240:	91 1d       	adc	r25, r1
 242:	21 91       	ld	r18, Z+
 244:	20 53       	subi	r18, 0x30	; 48
 246:	2a 30       	cpi	r18, 0x0A	; 10
 248:	c0 f3       	brcs	.-16     	; 0x23a <atoi+0x22>
 24a:	1e f4       	brtc	.+6      	; 0x252 <atoi+0x3a>
 24c:	90 95       	com	r25
 24e:	81 95       	neg	r24
 250:	9f 4f       	sbci	r25, 0xFF	; 255
 252:	08 95       	ret

00000254 <strchr>:
 254:	fc 01       	movw	r30, r24
 256:	81 91       	ld	r24, Z+
 258:	86 17       	cp	r24, r22
 25a:	21 f0       	breq	.+8      	; 0x264 <strchr+0x10>
 25c:	88 23       	and	r24, r24
 25e:	d9 f7       	brne	.-10     	; 0x256 <strchr+0x2>
 260:	99 27       	eor	r25, r25
 262:	08 95       	ret
 264:	31 97       	sbiw	r30, 0x01	; 1
 266:	cf 01       	movw	r24, r30
 268:	08 95       	ret

0000026a <strcpy>:
 26a:	fb 01       	movw	r30, r22
 26c:	dc 01       	movw	r26, r24
 26e:	01 90       	ld	r0, Z+
 270:	0d 92       	st	X+, r0
 272:	00 20       	and	r0, r0
 274:	e1 f7       	brne	.-8      	; 0x26e <strcpy+0x4>
 276:	08 95       	ret

00000278 <itoa>:
 278:	45 32       	cpi	r20, 0x25	; 37
 27a:	51 05       	cpc	r21, r1
 27c:	20 f4       	brcc	.+8      	; 0x286 <itoa+0xe>
 27e:	42 30       	cpi	r20, 0x02	; 2
 280:	10 f0       	brcs	.+4      	; 0x286 <itoa+0xe>
 282:	0c 94 47 01 	jmp	0x28e	; 0x28e <__itoa_ncheck>
 286:	fb 01       	movw	r30, r22
 288:	10 82       	st	Z, r1
 28a:	cb 01       	movw	r24, r22
 28c:	08 95       	ret

0000028e <__itoa_ncheck>:
 28e:	bb 27       	eor	r27, r27
 290:	4a 30       	cpi	r20, 0x0A	; 10
 292:	31 f4       	brne	.+12     	; 0x2a0 <__itoa_ncheck+0x12>
 294:	99 23       	and	r25, r25
 296:	22 f4       	brpl	.+8      	; 0x2a0 <__itoa_ncheck+0x12>
 298:	bd e2       	ldi	r27, 0x2D	; 45
 29a:	90 95       	com	r25
 29c:	81 95       	neg	r24
 29e:	9f 4f       	sbci	r25, 0xFF	; 255
 2a0:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <__utoa_common>

000002a4 <__mulhi_const_10>:
 2a4:	7a e0       	ldi	r23, 0x0A	; 10
 2a6:	97 9f       	mul	r25, r23
 2a8:	90 2d       	mov	r25, r0
 2aa:	87 9f       	mul	r24, r23
 2ac:	80 2d       	mov	r24, r0
 2ae:	91 0d       	add	r25, r1
 2b0:	11 24       	eor	r1, r1
 2b2:	08 95       	ret

000002b4 <__utoa_ncheck>:
 2b4:	bb 27       	eor	r27, r27

000002b6 <__utoa_common>:
 2b6:	fb 01       	movw	r30, r22
 2b8:	55 27       	eor	r21, r21
 2ba:	aa 27       	eor	r26, r26
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	aa 1f       	adc	r26, r26
 2c2:	a4 17       	cp	r26, r20
 2c4:	10 f0       	brcs	.+4      	; 0x2ca <__utoa_common+0x14>
 2c6:	a4 1b       	sub	r26, r20
 2c8:	83 95       	inc	r24
 2ca:	50 51       	subi	r21, 0x10	; 16
 2cc:	b9 f7       	brne	.-18     	; 0x2bc <__utoa_common+0x6>
 2ce:	a0 5d       	subi	r26, 0xD0	; 208
 2d0:	aa 33       	cpi	r26, 0x3A	; 58
 2d2:	08 f0       	brcs	.+2      	; 0x2d6 <__utoa_common+0x20>
 2d4:	a9 5d       	subi	r26, 0xD9	; 217
 2d6:	a1 93       	st	Z+, r26
 2d8:	00 97       	sbiw	r24, 0x00	; 0
 2da:	79 f7       	brne	.-34     	; 0x2ba <__utoa_common+0x4>
 2dc:	b1 11       	cpse	r27, r1
 2de:	b1 93       	st	Z+, r27
 2e0:	11 92       	st	Z+, r1
 2e2:	cb 01       	movw	r24, r22
 2e4:	0c 94 74 01 	jmp	0x2e8	; 0x2e8 <strrev>

000002e8 <strrev>:
 2e8:	dc 01       	movw	r26, r24
 2ea:	fc 01       	movw	r30, r24
 2ec:	67 2f       	mov	r22, r23
 2ee:	71 91       	ld	r23, Z+
 2f0:	77 23       	and	r23, r23
 2f2:	e1 f7       	brne	.-8      	; 0x2ec <strrev+0x4>
 2f4:	32 97       	sbiw	r30, 0x02	; 2
 2f6:	04 c0       	rjmp	.+8      	; 0x300 <strrev+0x18>
 2f8:	7c 91       	ld	r23, X
 2fa:	6d 93       	st	X+, r22
 2fc:	70 83       	st	Z, r23
 2fe:	62 91       	ld	r22, -Z
 300:	ae 17       	cp	r26, r30
 302:	bf 07       	cpc	r27, r31
 304:	c8 f3       	brcs	.-14     	; 0x2f8 <strrev+0x10>
 306:	08 95       	ret

00000308 <_exit>:
 308:	f8 94       	cli

0000030a <__stop_program>:
 30a:	ff cf       	rjmp	.-2      	; 0x30a <__stop_program>
